{"version":3,"sources":["List/list.js","List/initialList.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","React","lazy","List","memo","props","useState","modalShow","setModalShow","Fragment","onClick","className","src","image","name","status","species","fallback","location","origin","gender","show","handleClose","initialList","App","initialRender","useRef","loadingRef","windowRef","enteredFilter","setEnteredFilter","enteredList","setEnteredList","curr","maxpage","currmaxpage","setcurrmaxpage","condition","msg","loading","setloading","getName","names","pages","signal","axios","get","then","res","data","results","page","info","catch","err","useEffect","current","timer","setTimeout","clearTimeout","options","root","rootMargin","threshold","observer","IntersectionObserver","entities","isIntersecting","nextPage","observe","unobserve","displaylist","map","item","i","onChange","event","target","value","size","placeholder","prefix","SearchOutlined","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cea38dc.chunk.js","sourcesContent":["import \"./list.css\";\nimport React, { Suspense } from \"react\";\nimport { useState } from \"react\";\nconst Modal = React.lazy(() => import(\"../Modal/modal\"));\nconst List = React.memo((props) => {\n  const [modalShow, setModalShow] = useState(false);\n  const showModal = () => {\n    setModalShow(true);\n  };\n\n  const hideModal = () => {\n    setModalShow(false);\n  };\n  return (\n    <React.Fragment>\n      <div onClick={showModal} className=\"list\">\n        <div className=\"info\">\n          <img className=\"image\" src={props.image} />\n          <h3>{props.name}</h3>\n        </div>\n        <div className=\"info2\">\n          <span className=\"dot\"></span>\n          <h3>{props.status}-</h3>\n          <h3>{props.species}</h3>\n        </div>\n      </div>\n      {modalShow ? (\n        <Suspense fallback={<div>Loading...</div>}>\n          <Modal\n            location={props.location}\n            image={props.image}\n            name={props.name}\n            status={props.status}\n            species={props.species}\n            origin={props.origin}\n            gender={props.gender}\n            show={modalShow}\n            handleClose={hideModal}\n          ></Modal>\n        </Suspense>\n      ) : null}\n    </React.Fragment>\n  );\n});\n\nexport default List;\n","const initialList = [\n  {\n    className: \"list\",\n    image: \"https://rickandmortyapi.com/api/character/avatar/180.jpeg\",\n    name: \"Jessica\",\n    status: \"Alive\",\n    species: \"Cronenberg\",\n    origin: { name: \"Earth (C-137)\" },\n    gender: \"Female\",\n    location: { name: \"Earth (C-137)\" },\n  },\n  {\n    className: \"list\",\n    image: \"https://rickandmortyapi.com/api/character/avatar/380.jpeg\",\n    name: \"Weird Rick\",\n    status: \"Unknown\",\n    species: \"Human\",\n    origin: { name: \"unknown\" },\n    gender: \"Male\",\n    location: { name: \"unknown\" },\n  },\n  {\n    className: \"list\",\n    image: \"https://rickandmortyapi.com/api/character/avatar/608.jpeg\",\n    name: \"Jesus Christ\",\n    status: \"Alive\",\n    species: \"Human\",\n    origin: { name: \"Ricks’s Story\" },\n    gender: \"Male\",\n    location: { name: \"Ricks’s Story\" },\n  },\n  {\n    className: \"list\",\n    image: \"https://rickandmortyapi.com/api/character/avatar/664.jpeg\",\n    name: \"Ticktock\",\n    status: \"Unknown\",\n    species: \"Humanoid\",\n    origin: { name: \"Gaia\" },\n    gender: \"Genderless\",\n    location: { name: \"Gaia\" },\n  },\n];\nexport default initialList;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport List from \"./List/list\";\nimport initialList from \"./List/initialList\";\n\nfunction App() {\n  let initialRender = useRef(false);\n  let loadingRef = useRef();\n  let windowRef = useRef();\n  const [enteredFilter, setEnteredFilter] = useState(\"\");\n  const [enteredList, setEnteredList] = useState(initialList);\n  const [currmaxpage, setcurrmaxpage] = useState({ curr: 1, maxpage: null });\n  const [loading, setloading] = useState({ condition: false, msg: \"Loading\" });\n\n  //fetch names\n  const getName = (names, pages, signal) => {\n    setloading({ condition: true, msg: \"Loading\" });\n    axios\n      .get(\n        `https://rickandmortyapi.com/api/character/?name=${names}&page=${pages}`\n      )\n      .then((res) => res.data)\n      .then((data) => {\n        if (signal) {\n          setEnteredList([...enteredList, ...data.results]);\n          setcurrmaxpage((page) => ({ ...page, curr: pages }));\n        } else {\n          setEnteredList(data.results);\n          setcurrmaxpage((page) => ({ curr: 1, maxpage: data.info.pages + 1 }));\n          setloading({ condition: false, msg: \"Loading\" });\n        }\n      })\n      .catch((err) => {\n        return;\n      });\n  };\n\n  //debouncing the api\n  useEffect(() => {\n    if (initialRender.current) {\n      if (enteredFilter) {\n        const timer = setTimeout(() => {\n          getName(enteredFilter, 1, 0);\n        }, 500);\n        return () => {\n          clearTimeout(timer);\n        };\n      } else {\n        setEnteredList(initialList);\n      }\n    } else {\n      initialRender.current = true;\n    }\n  }, [enteredFilter]);\n\n  //observer API\n  useEffect(() => {\n    let options = {\n      root: windowRef.current,\n      rootMargin: \"0px\",\n      threshold: 1.0,\n    };\n\n    const observer = new IntersectionObserver((entities, observer) => {\n      const first = entities[0];\n      if (first.isIntersecting) {\n        const nextPage = currmaxpage.curr + 1;\n        if (nextPage < currmaxpage.maxpage && enteredFilter) {\n          getName(enteredFilter, nextPage, 1);\n        } else {\n          setloading({ condition: false, msg: \"End of Results\" });\n        }\n      }\n    }, options);\n    observer.observe(loadingRef.current);\n    return () => observer.unobserve(loadingRef.current);\n  }, [enteredList, currmaxpage]);\n\n  let displaylist = enteredList.map((item, i) => {\n    return (\n      <List\n        key={i}\n        image={item.image}\n        name={item.name}\n        status={item.status}\n        species={item.species}\n        origin={item.origin.name}\n        gender={item.gender}\n        location={item.location.name}\n      ></List>\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"heading\">\n          <h1>Rick and Morty Search</h1>\n        </div>\n        <div className=\"search\">\n          <Input\n            onChange={(event) => setEnteredFilter(event.target.value)}\n            size=\"large\"\n            placeholder=\"Search here\"\n            prefix={<SearchOutlined />}\n          />\n        </div>\n        <div ref={windowRef} className=\"listings\">\n          {displaylist}\n          <div ref={loadingRef}>\n            <span>{loading.msg}...</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}